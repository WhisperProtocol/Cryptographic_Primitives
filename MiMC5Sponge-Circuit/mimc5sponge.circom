pragma circom 2.0.0;

template MiMC5Feistel() {
    signal input iL;
    signal input iR;
    signal input k;

    signal output oL;
    signal output oR;

    var nRounds = 20;
    var c[20] = [
            0, 
            67256985278946792573504470683021552481425376564942003509467388347265435686319,
            34601712435808230510849021956604886379784859966393893752031008743195194721026,
            52368080170887714141150069981858185426722927919784199155012342064965262395124,
            110508662515334459133237487385236237797626280306153232733048772676378668657519,
            91766537134511943470158813732590646407895359032336197697200969218885455199297,
            18806559093894881105877331255072700945939966616512907344221168403280410498395,
            25986164629270112649269845766272755066491912482580185861218290907566397260361,
            22728067657731155332784550008334438456404465050768035586038113270755280911123,
            93818887079554094168607082071244305938605233941609828148002114931436724252108,
            93074010087109710837565798910264635559287822360719548742200690006062030949325,
            10879593914640442858293552536528329156159659145254339185828824231702814020332,
            91905002456641737478196110038913940124118934089691557823924891422489003593915,
            107544802868176676934094824885868652685693685221116391355698569051323608600757,
            72086347372979096215795804408201210099501213484893472766072287132183279663007,
            91784932603466943103087159958639366050829342259029453567836410698259885398578,
            15167143795088834646011588660534951610501930859597483941265600892374590584428,
            25534877162882782130002641974256642377355156051554157016119235979765391492276,
            9090720949345694228449039841584268632707327547341595161426042618529921246022,
            97623616652031737990446487373598985308817970471034189910224369463460178799330
    ];

    signal lastOutputL[nRounds + 1];
    signal lastOutputR[nRounds + 1];

    var base[nRounds];
    signal base2[nRounds];
    signal base4[nRounds];

    lastOutputL[0] <== iL;
    lastOutputR[0] <== iR;

    for (var i = 0; i < nRounds; i++) {
        base[i] = lastOutputR[i] + k + c[i];
        base2[i] <== base[i] * base[i];
        base4[i] <== base2[i] * base2[i];

        lastOutputR[i + 1] <== lastOutputL[i] + base4[i] * base[i];
        lastOutputL[i + 1] <== lastOutputR[i]; 
    }

    oL <== lastOutputL[nRounds];
    oR <== lastOutputR[nRounds];
}

template MiMC5Sponge(nInputs) {
    signal input k;
    signal input ins[nInputs];
    signal output o;

    signal lastR[nInputs + 1];
    signal lastC[nInputs + 1];

    lastR[0] <== 0;
    lastC[0] <== 0;

    component layers[nInputs];

    for (var i = 0; i < nInputs; i++) {
        layers[i] = MiMC5Feistel();

        layers[i].iL <== lastR[i] + ins[i]; 
        layers[i].iR <== lastC[i];
        layers[i].k <== k;

        lastR[i + 1] <== layers[i].oL;
        lastC[i + 1] <== layers[i].oR;       
    }

    o <== lastR[nInputs];
}

component main = MiMC5Sponge(2);